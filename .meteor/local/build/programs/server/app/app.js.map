{"version":3,"sources":["meteor://ðŸ’»app/imports/api/messages.js","meteor://ðŸ’»app/imports/api/users.js","meteor://ðŸ’»app/imports/startup/roles.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Messages","Meteor","importSync","v","Mongo","check","Collection","methods","text","String","userId","Error","insert","createdAt","Date","owner","username","user","id","Roles","userIsInRole","GLOBAL_GROUP","remove","Accounts","password","createUser","users","update","_id","$set","profile","name","email","phone","permission","addUsersToRoles","removeUsersFromRoles","isServer","roles","console","log"],"mappings":";;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAS;AAAA,SAAIA,QAAJ;AAAA;AAAV,CAAd;AAAuC,IAAIC,eAAJ;AAAWH,OAAOI,UAAP,CAAkB,eAAlB,EAAkC;AAACD,SAAO,UAASE,CAAT,EAAW;AAACF,WAAOE,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,cAAJ;AAAUN,OAAOI,UAAP,CAAkB,cAAlB,EAAiC;AAACE,QAAM,UAASD,CAAT,EAAW;AAACC,UAAMD,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAAiE,IAAIE,cAAJ;AAAUP,OAAOI,UAAP,CAAkB,cAAlB,EAAiC;AAACG,QAAM,UAASF,CAAT,EAAW;AAACE,UAAMF,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAQpM,IAAMH,WAAW,IAAII,MAAME,UAAV,CAAqB,UAArB,CAAjB;AAGPL,OAAOM,OAAP,CAAe;AACd,kBADc,YACIC,IADJ,EACU;AACvB;AACAH,QAAMG,IAAN,EAAYC,MAAZ,EAFuB,CAIvB;;AACG,MAAI,CAAER,OAAOS,MAAP,EAAN,EAAuB;AACrB,SAAM,IAAIT,OAAOU,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDX,WAASY,MAAT,CAAgB;AACfJ,aADe;AAEfK,cAAW,IAAIC,IAAJ,EAFI;AAGfC,UAAOd,OAAOS,MAAP,EAHQ;AAIfM,aAAUf,OAAOgB,IAAP,GAAcD;AAJT,GAAhB;AAMH,EAhBa;AAiBd,kBAjBc,YAiBKE,EAjBL,EAiBS;AACtB;AACAb,QAAMa,EAAN,EAAUT,MAAV;;AACA,MAAGU,MAAMC,YAAN,CAAmBnB,OAAOS,MAAP,EAAnB,EAAoC,OAApC,EAA6CS,MAAME,YAAnD,CAAH,EAAqE;AACpErB,YAASsB,MAAT,CAAgBJ,EAAhB;AACA;AACD;AAvBa,CAAf,yF;;;;;;;;;;;ACXA,IAAIK,iBAAJ;AAAazB,OAAOI,UAAP,CAAkB,sBAAlB,EAAyC;AAACqB,WAAS,UAASpB,CAAT,EAAW;AAACoB,aAASpB,CAAT;AAAW;AAAjC,CAAzC,EAA4E,CAA5E;AAA+E,IAAIgB,cAAJ;AAAUrB,OAAOI,UAAP,CAAkB,uBAAlB,EAA0C;AAACiB,QAAM,UAAShB,CAAT,EAAW;AAACgB,UAAMhB,CAAN;AAAQ;AAA3B,CAA1C,EAAuE,CAAvE;AAA0E,IAAIF,eAAJ;AAAWH,OAAOI,UAAP,CAAkB,eAAlB,EAAkC;AAACD,SAAO,UAASE,CAAT,EAAW;AAACF,WAAOE,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAQ3LF,OAAOM,OAAP,CAAe;AACd,mBADc,YACMS,QADN,EACgBQ,QADhB,EAC0B;AACvC;AACA,MAAIN,KAAKK,SAASE,UAAT,CAAoB;AAACT,aAAUA,QAAX;AAAqBQ,aAAUA;AAA/B,GAApB,CAAT,CAFuC,CAIvC;;AACAvB,SAAOyB,KAAP,CAAaC,MAAb,CAAoB;AAACC,QAAKV;AAAN,GAApB,EAA+B;AAACW,SAAM;AAACC,aAAS;AAACC,WAAM,EAAP;AAAWC,YAAO,EAAlB;AAAsBC,YAAO;AAA7B;AAAV;AAAP,GAA/B,EALuC,CAOvC;;AACA,SAAOf,EAAP;AACA,EAVa;AAWd,gBAXc,YAWEA,EAXF,EAWMgB,UAXN,EAWkB;AAC/B;AACAf,QAAMgB,eAAN,CAAsB,CAACjB,EAAD,CAAtB,EAA4BgB,UAA5B,EAAwCf,MAAME,YAA9C;AACA,EAda;AAed,kBAfc,YAeKH,EAfL,EAeS;AACtB;AACAC,QAAMgB,eAAN,CAAsB,CAACjB,EAAD,CAAtB,EAA4B,OAA5B,EAAqC,aAArC;AACA,EAlBa;AAmBd,oBAnBc,YAmBOA,EAnBP,EAmBW;AACxB;AACAC,QAAMiB,oBAAN,CAA2B,CAAClB,EAAD,CAA3B,EAAiC,OAAjC,EAA0C,aAA1C;AACA,EAtBa;AAuBd,kBAvBc,YAuBKA,EAvBL,EAuBS;AACtB;AACAjB,SAAOyB,KAAP,CAAaJ,MAAb,CAAoB;AAACM,QAAKV;AAAN,GAApB;AACA,EA1Ba;AA2Bd,kBA3Bc,YA2BKF,QA3BL,EA2Bee,IA3Bf,EA2BqBC,KA3BrB,EA2B4BC,KA3B5B,EA2BmC;AAChD;AACA;AACA,MAAGjB,aAAa,MAAhB,EAAwB;AACvB;AACA,UAAO,iCAAP;AACA;;AACDf,SAAOyB,KAAP,CAAaC,MAAb,CAAoB;AAAC,eAAYX;AAAb,GAApB,EAA4C;AAACa,SAAM;AAAE,eAAW;AAAC,aAAQE,IAAT;AAAe,cAASC,KAAxB;AAA+B,cAASC;AAAxC;AAAb;AAAP,GAA5C;AACA,SAAO,IAAP;AACA;AApCa,CAAf,wF;;;;;;;;;;;ACRA,IAAId,cAAJ;AAAUrB,OAAOI,UAAP,CAAkB,uBAAlB,EAA0C;AAACiB,QAAM,UAAShB,CAAT,EAAW;AAACgB,UAAMhB,CAAN;AAAQ;AAA3B,CAA1C,EAAuE,CAAvE;AAA0E,IAAIF,eAAJ;AAAWH,OAAOI,UAAP,CAAkB,eAAlB,EAAkC;AAACD,SAAO,UAASE,CAAT,EAAW;AAACF,WAAOE,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAI/FF,OAAOM,OAAP,CAAe;AACd,iBADc,cACK;AAClB,MAAGN,OAAOoC,QAAV,EAAoB;AACnB,OAAG,CAACpC,OAAOqC,KAAX,EAAkB;AACjBC,YAAQC,GAAR,CAAY,aAAZ;AACArB,UAAMgB,eAAN,CAAsB,CAAC,KAAKzB,MAAN,CAAtB,EAAqC,OAArC,EAA8CS,MAAME,YAApD;AACA;AACD;AACD;AARa,CAAf,wF;;;;;;;;;;;ACJAvB,OAAOI,UAAP,CAAkB,6BAAlB;AAAiDJ,OAAOI,UAAP,CAAkB,4BAAlB;AAAgDJ,OAAOI,UAAP,CAAkB,yBAAlB,8C","file":"/app.js","sourcesContent":["// This file contains code handling the messages collection\n\nimport { Meteor } from 'meteor/meteor';\n\nimport { Mongo } from 'meteor/mongo';\n\nimport { check } from 'meteor/check';\n\nexport const Messages = new Mongo.Collection('messages');\n\n\nMeteor.methods({\n\t'messages.insert'(text) {\n\t\t// This method is used to insert new messages into the collection\n\t\tcheck(text, String);\n\n\t\t// Make sure the user is logged in before inserting a message\n\t    if (! Meteor.userId()) {\n\t      throw new Meteor.Error('not-authorized');\n\t    }\n\n\t    Messages.insert({\n\t    \ttext,\n\t    \tcreatedAt: new Date(),\n\t    \towner: Meteor.userId(),\n\t    \tusername: Meteor.user().username,\n\t    });\n\t},\n\t'messages.remove' (id) {\n\t\t// This method removes a message that the admin wishes to delete\n\t\tcheck(id, String);\n\t\tif(Roles.userIsInRole(Meteor.userId(), 'admin', Roles.GLOBAL_GROUP)) {\n\t\t\tMessages.remove(id);\n\t\t}\n\t}\n});","// This files contains Meteor methods for handling the default user collection in Meteor\n\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { Roles } from 'meteor/alanning:roles';\n\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n\t'accounts.addUser' (username, password) {\n\t\t// This method allows the admin to create new users\n\t\tvar id = Accounts.createUser({username: username, password: password});\n\n\t\t// It also populates the profile object for the newly created users\n\t\tMeteor.users.update({_id: id}, {$set: {profile: {name: \"\", email: \"\", phone: \"\"}}});\n\n\t\t// and returns the id of the newly created user\n\t\treturn id;\n\t},\n\t'roles.setRole'(id, permission) {\n\t\t// Sets the roles for the newly created users\n\t\tRoles.addUsersToRoles([id], permission, Roles.GLOBAL_GROUP);\n\t},\n\t'roles.blockUser' (id) {\n\t\t// Allows the manager and admin to block a user from posting a message\n\t\tRoles.addUsersToRoles([id], 'block', 'postMessage');\n\t},\n\t'roles.unblockUser' (id) {\n\t\t// Allows the manager and admin to unblock a user\n\t\tRoles.removeUsersFromRoles([id], 'block', 'postMessage');\n\t},\n\t'user.removeUser' (id) {\n\t\t// This method removes the user whose userId has been passed as argument\n\t\tMeteor.users.remove({_id: id});\n\t},\n\t'user.updateUser' (username, name, email, phone) {\n\t\t// This method updates the profile object of a user.\n\t\t// This operation can be called by only the admin and managers\n\t\tif(username === \"root\") {\n\t\t\t// Check if the user is root. If yes then don't update profile\n\t\t\treturn \"Admin details can't be changed.\";\n\t\t}\n\t\tMeteor.users.update({\"username\": username}, {$set: { \"profile\": {\"name\": name, \"email\": email, \"phone\": phone}}});\n\t\treturn true;\n\t}\n});","import { Roles } from 'meteor/alanning:roles';\n\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n\t'setInitialRole'() {\n\t\tif(Meteor.isServer) {\n\t\t\tif(!Meteor.roles) {\n\t\t\t\tconsole.log(\"Setup admin\");\n\t\t\t\tRoles.addUsersToRoles([this.userId], 'admin', Roles.GLOBAL_GROUP);\n\t\t\t}\n\t\t}\n\t}\n});","// Import important modules\n\nimport '../imports/startup/roles.js';\nimport '../imports/api/messages.js';\nimport '../imports/api/users.js';"]}