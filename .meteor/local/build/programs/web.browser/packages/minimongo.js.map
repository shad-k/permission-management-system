{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo.js","meteor://ðŸ’»app/packages/minimongo/wrap_transform.js","meteor://ðŸ’»app/packages/minimongo/helpers.js","meteor://ðŸ’»app/packages/minimongo/selector.js","meteor://ðŸ’»app/packages/minimongo/sort.js","meteor://ðŸ’»app/packages/minimongo/projection.js","meteor://ðŸ’»app/packages/minimongo/modify.js","meteor://ðŸ’»app/packages/minimongo/diff.js","meteor://ðŸ’»app/packages/minimongo/id_map.js","meteor://ðŸ’»app/packages/minimongo/observe.js","meteor://ðŸ’»app/packages/minimongo/objectid.js"],"names":["LocalCollection","name","self","_docs","_IdMap","_observeQueue","Meteor","_SynchronousQueue","next_qid","queries","_savedOriginals","paused","Minimongo","MinimongoTest","MinimongoError","message","e","Error","prototype","find","selector","options","arguments","length","Cursor","collection","sorter","matcher","Matcher","_selectorIsId","_selectorId","_selectorIsIdPerhapsAsObject","_id","undefined","hasGeoQuery","sort","Sorter","skip","limit","fields","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","rewind","findOne","fetch","forEach","callback","thisArg","objects","_getRawObjects","ordered","_depend","addedBefore","removed","changed","movedBefore","_","each","elt","i","call","getTransform","map","res","doc","index","push","count","added","_publishCursor","sub","Package","mongo","Mongo","Collection","_getCollectionName","_observeChangesCallbacksAreOrdered","callbacks","_observeCallbacksAreOrdered","addedAt","changedAt","removedAt","movedTo","ObserveHandle","extend","observe","_observeFromObserveChanges","observeChanges","_allow_unordered","query","dirty","distances","resultsSnapshot","cursor","projectionFn","qid","results","wrapCallback","f","context","args","queueTask","apply","_suppress_initial","bind","EJSON","clone","handle","stop","active","onInvalidate","drain","selectedDoc","get","set","clear","id","matchResult","documentMatches","result","distance","comparator","getComparator","idx_start","idx_end","slice","changers","v","Dependency","depend","notifyChange","fnName","insert","invalidCharMsg","JSON","stringify","key","value","match","isString","has","_useOID","MongoID","ObjectID","Random","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","_eachPossiblyMatchingDoc","specificIds","_idsMatchedBySelector","breakIfFalse","remove","equals","size","queryRemove","removeId","removeDoc","_removeFromResults","update","mod","Function","qidToOriginalResults","docMap","idsMatchedBySelector","Array","memoizedCloneIfNeeded","docToMemoize","any","recomputeQids","updateCount","queryResult","_modifyAndNotify","arrayIndices","multi","dummy","insertedId","upsert","newDoc","_removeDollarOperators","_modify","isInsert","_returnObject","numberAffected","matched_before","old_doc","before","afterMatch","after","_updateInResults","_insertInSortedList","next","_findInOrderedResults","splice","changedFields","DiffSequence","makeChangedFields","isEmpty","orig_idx","new_idx","oldResults","_diffQueryChanges","_binarySearch","cmp","array","first","rangeLength","halfRange","Math","floor","idx","saveOriginals","retrieveOriginals","originals","pauseObservers","resumeObservers","__wrappedTransform__","wrapped","transformed","nonreactive","isPlainObject","isArray","x","isBinary","_isPlainObject","_f","_type","isIndexable","isOperatorObject","valueSelector","inconsistentOK","theseAreOperators","selKey","thisIsOperator","substr","isNumericKey","s","test","_paths","_hasGeoQuery","_hasWhere","_isSimple","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_recordPathUsed","nothingMatcher","compileDocumentSelector","isRoot","path","_getPaths","keys","docSelector","docMatchers","subSelector","LOGICAL_OPERATORS","inElemMatch","lookUpByIndex","makeLookupFunction","valueMatcher","compileValueSelector","branchValues","andDocumentMatchers","RegExp","convertElementMatcherToBranchedMatcher","regexpElementMatcher","operatorBranchedMatcher","equalityElementMatcher","elementMatcher","branches","expanded","dontExpandLeafArrays","expandArraysInBranches","dontIncludeLeafArrays","ret","element","matched","regexp","isEqual","lastIndex","elementSelector","_equal","operatorMatchers","operand","operator","simpleRange","contains","isNumber","simpleEquality","isObject","simpleInclusion","VALUE_OPERATORS","ELEMENT_OPERATORS","compileElementSelector","andBranchedMatchers","compileArrayOfDocumentSelectors","selectors","$and","matchers","$or","$nor","all","$where","selectorValue","$comment","invertBranchedMatcher","branchedMatcher","invertMe","$eq","$not","$ne","$nin","$in","$exists","exists","$options","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","maxDistance","point","$geometry","type","GeoJSON","pointDistance","geometryWithinRadius","pointToArray","distanceCoordinatePairs","branchedValues","branch","curDistance","a","b","y","isNaN","sqrt","identity","makeInequality","cmpValueComparator","operandType","_cmp","isBitSet","bit","eightBits","get8BitsSet","filter","convertNumberToUint8Array","number","numOfBits","toString","num8BitGroups","ceil","byteArray","Uint8Array","byte","ensureUint8Array","ensureOperandUint8Array","reduce","num","n","bitsClear","bitsSetOp","bitsSetVal","isUndefined","indexOf","bitsSet","anyBitCompare","setOrClear","op","allBitCompare","$lt","cmpValue","$gt","$lte","$gte","$mod","divisor","remainder","elementMatchers","option","$size","$type","$bitsAnyClear","$bitsAllClear","$bitsAllSet","$bitsAnySet","$regex","regexSource","source","$elemMatch","subMatcher","isDocMatcher","omit","arrayElement","arg","dontIterate","parts","split","firstPart","firstPartIsNumeric","nextPartIsNumeric","lookupRest","join","omitUnnecessaryFields","retVal","concat","firstLevel","appendToResult","more","forSort","arrayIndex","skipTheArrays","branchesOut","thisIsArray","leaf","docOrBranchedValues","andSomeMatchers","subMatchers","docOrBranches","subResult","Date","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","to_array","obj","selectorDoc","k","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","pluck","_getMinKeyFromDoc","minKey","_generateKeysFromDoc","_keyCompatibleWithSelector","_compareKeys","cb","valuesByIndexAndPath","pathFromIndices","indices","knownPaths","whichField","usedPaths","soleKey","values","key1","key2","invert","compare","doc1","doc2","constraintsByPath","constraints","ignoreCase","multiline","specPart","comparatorArray","_checkSupportedProjection","_idProjection","details","projectionDetails","ruleTree","subdoc","including","rule","tree","fieldsKeys","reject","keyPath","projectionRulesTree","pathsToTree","node","fullPath","currentPath","anotherPath","paths","newLeafFn","conflictFn","treePos","pathArr","success","lastKey","last","val","intersection","isModifier","modFunc","MODIFIERS","keypath","keyparts","noCreate","NO_CREATE_MODIFIERS","forbidArray","target","findModTarget","field","pop","usedArrayIndex","keypart","indexable","setPropertyError","parseInt","$unset","$pop","$rename","$pull","$pullAll","$currentDate","hasOwnProperty","$min","$max","$inc","$set","$setOnInsert","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","j","spliceArguments","$pushAll","$addToSet","isEach","out","exclude","target2","field2","$bit","newResults","observer","diffQueryChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffObjects","left","right","diffObjects","IdMap","idStringify","idParse","_inherits","_CachingChangeObserver","orderedFromCallbacks","docs","OrderedDict","applyChange","putBefore","moveBefore","applyChanges","observeCallbacks","suppressed","observeChangesCallbacks","_no_indices","oldDoc","from","to","changeObserver","subIds"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\n\n// Cursor: a specification for a particular subset of documents, w/\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n// ObserveHandle: the return value of a live query.\n\nLocalCollection = function (name) {\n  var self = this;\n  self.name = name;\n  // _id -> document (also containing id)\n  self._docs = new LocalCollection._IdMap;\n\n  self._observeQueue = new Meteor._SynchronousQueue();\n\n  self.next_qid = 1; // live query id generator\n\n  // qid -> live query object. keys:\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n  //  results: array (ordered) or object (unordered) of current results\n  //    (aliased with self._docs!)\n  //  resultsSnapshot: snapshot of results. null if not paused.\n  //  cursor: Cursor object for the query.\n  //  selector, sorter, (callbacks): functions\n  self.queries = {};\n\n  // null if not saving originals; an IdMap from id to original document value if\n  // saving originals. See comments before saveOriginals().\n  self._savedOriginals = null;\n\n  // True when observers are paused and we should not send callbacks.\n  self.paused = false;\n};\n\nMinimongo = {};\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {};\n\nMinimongoError = function (message) {\n  var e = new Error(message);\n  e.name = \"MinimongoError\";\n  return e;\n};\n\n\n// options may include sort, skip, limit, reactive\n// sort may be any of these forms:\n//     {a: 1, b: -1}\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n//     [\"a\", [\"b\", \"desc\"]]\n//   (in the first form you're beholden to key enumeration order in\n//   your javascript VM)\n//\n// reactive: if given, and false, don't register with Tracker (default\n// is true)\n//\n// XXX possibly should support retrieving a subset of fields? and\n// have it be a hint (ignored on the client, when not copying the\n// doc?)\n//\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\n// XXX add one more sort form: \"key\"\n// XXX tests\nLocalCollection.prototype.find = function (selector, options) {\n  // default syntax for everything is to omit the selector argument.\n  // but if selector is explicitly passed in as false or undefined, we\n  // want a selector that matches nothing.\n  if (arguments.length === 0)\n    selector = {};\n\n  return new LocalCollection.Cursor(this, selector, options);\n};\n\n// don't call this ctor directly.  use LocalCollection.find().\n\nLocalCollection.Cursor = function (collection, selector, options) {\n  var self = this;\n  if (!options) options = {};\n\n  self.collection = collection;\n  self.sorter = null;\n  self.matcher = new Minimongo.Matcher(selector);\n\n  if (LocalCollection._selectorIsId(selector)) {\n    // stash for fast path\n    self._selectorId = selector;\n  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    // also do the fast path for { _id: idString }\n    self._selectorId = selector._id;\n  } else {\n    self._selectorId = undefined;\n    if (self.matcher.hasGeoQuery() || options.sort) {\n      self.sorter = new Minimongo.Sorter(options.sort || [],\n                                         { matcher: self.matcher });\n    }\n  }\n\n  self.skip = options.skip;\n  self.limit = options.limit;\n  self.fields = options.fields;\n\n  self._projectionFn = LocalCollection._compileProjection(self.fields || {});\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  // by default, queries register w/ Tracker when it is available.\n  if (typeof Tracker !== \"undefined\")\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\n};\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nLocalCollection.Cursor.prototype.rewind = function () {\n};\n\nLocalCollection.prototype.findOne = function (selector, options) {\n  if (arguments.length === 0)\n    selector = {};\n\n  // NOTE: by setting limit 1 here, we end up using very inefficient\n  // code that recomputes the whole query on each update. The upside is\n  // that when you reactively depend on a findOne you only get\n  // invalidated when the found object changes, not any object in the\n  // collection. Most findOne will be by id, which has a fast path, so\n  // this might not be a big deal. In most cases, invalidation causes\n  // the called to re-query anyway, so this should be a net performance\n  // improvement.\n  options = options || {};\n  options.limit = 1;\n\n  return this.find(selector, options).fetch()[0];\n};\n\n/**\n * @callback IterationCallback\n * @param {Object} doc\n * @param {Number} index\n */\n/**\n * @summary Call `callback` once for each matching document, sequentially and synchronously.\n * @locus Anywhere\n * @method  forEach\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n  var self = this;\n\n  var objects = self._getRawObjects({ordered: true});\n\n  if (self.reactive) {\n    self._depend({\n      addedBefore: true,\n      removed: true,\n      changed: true,\n      movedBefore: true});\n  }\n\n  _.each(objects, function (elt, i) {\n    // This doubles as a clone operation.\n    elt = self._projectionFn(elt);\n\n    if (self._transform)\n      elt = self._transform(elt);\n    callback.call(thisArg, elt, i, self);\n  });\n};\n\nLocalCollection.Cursor.prototype.getTransform = function () {\n  return this._transform;\n};\n\n/**\n * @summary Map callback over all matching documents.  Returns an Array.\n * @locus Anywhere\n * @method map\n * @instance\n * @memberOf Mongo.Cursor\n * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.\n * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.\n */\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc, index) {\n    res.push(callback.call(thisArg, doc, index, self));\n  });\n  return res;\n};\n\n/**\n * @summary Return all matching documents as an Array.\n * @memberOf Mongo.Cursor\n * @method  fetch\n * @instance\n * @locus Anywhere\n * @returns {Object[]}\n */\nLocalCollection.Cursor.prototype.fetch = function () {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc) {\n    res.push(doc);\n  });\n  return res;\n};\n\n/**\n * @summary Returns the number of documents that match a query.\n * @memberOf Mongo.Cursor\n * @method  count\n * @instance\n * @locus Anywhere\n * @returns {Number}\n */\nLocalCollection.Cursor.prototype.count = function () {\n  var self = this;\n\n  if (self.reactive)\n    self._depend({added: true, removed: true},\n                 true /* allow the observe to be unordered */);\n\n  return self._getRawObjects({ordered: true}).length;\n};\n\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  if (! self.collection.name)\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\n  var collection = self.collection.name;\n\n  // XXX minimongo should not depend on mongo-livedata!\n  if (! Package.mongo) {\n    throw new Error(\"Can't publish from Minimongo without the `mongo` package.\");\n  }\n\n  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);\n};\n\nLocalCollection.Cursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self.collection.name;\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore)\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.addedAt && callbacks.added)\n    throw new Error(\"Please specify only one of added() and addedAt()\");\n  if (callbacks.changedAt && callbacks.changed)\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\n  if (callbacks.removed && callbacks.removedAt)\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\n            || callbacks.removedAt);\n};\n\n// the handle that comes back from observe.\nLocalCollection.ObserveHandle = function () {};\n\n// options to contain:\n//  * callbacks for observe():\n//    - addedAt (document, atIndex)\n//    - added (document)\n//    - changedAt (newDocument, oldDocument, atIndex)\n//    - changed (newDocument, oldDocument)\n//    - removedAt (document, atIndex)\n//    - removed (document)\n//    - movedTo (document, oldIndex, newIndex)\n//\n// attributes available on returned query handle:\n//  * stop(): end updates\n//  * collection: the collection this query is querying\n//\n// iff x is a returned query handle, (x instanceof\n// LocalCollection.ObserveHandle) is true\n//\n// initial results delivered through added callback\n// XXX maybe callbacks should take a list of objects, to expose transactions?\n// XXX maybe support field limiting (to limit what you're notified on)\n\n_.extend(LocalCollection.Cursor.prototype, {\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observe: function (options) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, options);\n  },\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it changes\n   */\n  observeChanges: function (options) {\n    var self = this;\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\n      throw new Error(\"must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit\");\n\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n\n    var query = {\n      dirty: false,\n      matcher: self.matcher, // not fast pathed\n      sorter: ordered && self.sorter,\n      distances: (\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),\n      resultsSnapshot: null,\n      ordered: ordered,\n      cursor: self,\n      projectionFn: self._projectionFn\n    };\n    var qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (self.reactive) {\n      qid = self.collection.next_qid++;\n      self.collection.queries[qid] = query;\n    }\n    query.results = self._getRawObjects({\n      ordered: ordered, distances: query.distances});\n    if (self.collection.paused)\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    var wrapCallback = function (f) {\n      if (!f)\n        return function () {};\n      return function (/*args*/) {\n        var context = this;\n        var args = arguments;\n\n        if (self.collection.paused)\n          return;\n\n        self.collection._observeQueue.queueTask(function () {\n          f.apply(context, args);\n        });\n      };\n    };\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !self.collection.paused) {\n      // XXX unify ordered and unordered interface\n      var each = ordered\n            ? _.bind(_.each, null, query.results)\n            : _.bind(query.results.forEach, query.results);\n      each(function (doc) {\n        var fields = EJSON.clone(doc);\n\n        delete fields._id;\n        if (ordered)\n          query.addedBefore(doc._id, self._projectionFn(fields), null);\n        query.added(doc._id, self._projectionFn(fields));\n      });\n    }\n\n    var handle = new LocalCollection.ObserveHandle;\n    _.extend(handle, {\n      collection: self.collection,\n      stop: function () {\n        if (self.reactive)\n          delete self.collection.queries[qid];\n      }\n    });\n\n    if (self.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(function () {\n        handle.stop();\n      });\n    }\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    self.collection._observeQueue.drain();\n\n    return handle;\n  }\n});\n\n// Returns a collection of matching objects, but doesn't deep copy them.\n//\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit\n// properties of the query.  if sorter is falsey, no sort -- you get the natural\n// order.\n//\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip\n// and limit should not be set).\n//\n// If ordered is set and this cursor is a $near geoquery, then this function\n// will use an _IdMap to track each distance from the $near argument point in\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'\n// argument, this function will clear it and use it for this purpose (otherwise\n// it will just create its own _IdMap). The observeChanges implementation uses\n// this to remember the distances after this function returns.\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {\n  var self = this;\n  options = options || {};\n\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n  // compatible\n  var results = options.ordered ? [] : new LocalCollection._IdMap;\n\n  // fast path for single ID value\n  if (self._selectorId !== undefined) {\n    // If you have non-zero skip and ask for a single id, you get\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\n    // path.\n    if (self.skip)\n      return results;\n\n    var selectedDoc = self.collection._docs.get(self._selectorId);\n    if (selectedDoc) {\n      if (options.ordered)\n        results.push(selectedDoc);\n      else\n        results.set(self._selectorId, selectedDoc);\n    }\n    return results;\n  }\n\n  // slow path for arbitrary selector, sort, skip, limit\n\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,\n  // live results set) object.  in other cases, distances is only used inside\n  // this function.\n  var distances;\n  if (self.matcher.hasGeoQuery() && options.ordered) {\n    if (options.distances) {\n      distances = options.distances;\n      distances.clear();\n    } else {\n      distances = new LocalCollection._IdMap();\n    }\n  }\n\n  self.collection._docs.forEach(function (doc, id) {\n    var matchResult = self.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (options.ordered) {\n        results.push(doc);\n        if (distances && matchResult.distance !== undefined)\n          distances.set(id, matchResult.distance);\n      } else {\n        results.set(id, doc);\n      }\n    }\n    // Fast path for limited unsorted queries.\n    // XXX 'length' check here seems wrong for ordered\n    if (self.limit && !self.skip && !self.sorter &&\n        results.length === self.limit)\n      return false;  // break\n    return true;  // continue\n  });\n\n  if (!options.ordered)\n    return results;\n\n  if (self.sorter) {\n    var comparator = self.sorter.getComparator({distances: distances});\n    results.sort(comparator);\n  }\n\n  var idx_start = self.skip || 0;\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\n  return results.slice(idx_start, idx_end);\n};\n\n// XXX Maybe we need a version of observe that just calls a callback if\n// anything changed.\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n  var self = this;\n\n  if (Tracker.active) {\n    var v = new Tracker.Dependency;\n    v.depend();\n    var notifyChange = _.bind(v.changed, v);\n\n    var options = {\n      _suppress_initial: true,\n      _allow_unordered: _allow_unordered\n    };\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\n           function (fnName) {\n             if (changers[fnName])\n               options[fnName] = notifyChange;\n           });\n\n    // observeChanges will stop() when this computation is invalidated\n    self.observeChanges(options);\n  }\n};\n\n// XXX enforce rule that field names can't start with '$' or contain '.'\n// (real mongodb does in fact enforce this)\n// XXX possibly enforce that 'undefined' does not appear (we assume\n// this in our handling of null and $exists)\nLocalCollection.prototype.insert = function (doc, callback) {\n  var self = this;\n  doc = EJSON.clone(doc);\n\n  // Make sure field names do not contain Mongo restricted\n  // characters ('.', '$', '\\0').\n  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n  if (doc) {\n    const invalidCharMsg = {\n      '.': \"contain '.'\",\n      '$': \"start with '$'\",\n      '\\0': \"contain null bytes\",\n    };\n    JSON.stringify(doc, (key, value) => {\n      let match;\n      if (_.isString(key) && (match = key.match(/^\\$|\\.|\\0/))) {\n        throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n      }\n      return value;\n    });\n  }\n\n  if (!_.has(doc, '_id')) {\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    doc._id = LocalCollection._useOID ? new MongoID.ObjectID()\n                                      : Random.id();\n  }\n  var id = doc._id;\n\n  if (self._docs.has(id))\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n\n  self._saveOriginal(id, undefined);\n  self._docs.set(id, doc);\n\n  var queriesToRecompute = [];\n  // trigger live queries that match\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n    var matchResult = query.matcher.documentMatches(doc);\n    if (matchResult.result) {\n      if (query.distances && matchResult.distance !== undefined)\n        query.distances.set(id, matchResult.distance);\n      if (query.cursor.skip || query.cursor.limit)\n        queriesToRecompute.push(qid);\n      else\n        LocalCollection._insertInResults(query, doc);\n    }\n  }\n\n  _.each(queriesToRecompute, function (qid) {\n    if (self.queries[qid])\n      self._recomputeResults(self.queries[qid]);\n  });\n  self._observeQueue.drain();\n\n  // Defer because the caller likely doesn't expect the callback to be run\n  // immediately.\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, id);\n    });\n  return id;\n};\n\n// Iterates over a subset of documents that could match selector; calls\n// f(doc, id) on each of them.  Specifically, if selector specifies\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the\n// same object that is in _docs.\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\n  var self = this;\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    for (var i = 0; i < specificIds.length; ++i) {\n      var id = specificIds[i];\n      var doc = self._docs.get(id);\n      if (doc) {\n        var breakIfFalse = f(doc, id);\n        if (breakIfFalse === false)\n          break;\n      }\n    }\n  } else {\n    self._docs.forEach(f);\n  }\n};\n\nLocalCollection.prototype.remove = function (selector, callback) {\n  var self = this;\n\n  // Easy special case: if we're not calling observeChanges callbacks and we're\n  // not saving originals and we got asked to remove everything, then just empty\n  // everything directly.\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\n    var result = self._docs.size();\n    self._docs.clear();\n    _.each(self.queries, function (query) {\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n    if (callback) {\n      Meteor.defer(function () {\n        callback(null, result);\n      });\n    }\n    return result;\n  }\n\n  var matcher = new Minimongo.Matcher(selector);\n  var remove = [];\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    if (matcher.documentMatches(doc).result)\n      remove.push(id);\n  });\n\n  var queriesToRecompute = [];\n  var queryRemove = [];\n  for (var i = 0; i < remove.length; i++) {\n    var removeId = remove[i];\n    var removeDoc = self._docs.get(removeId);\n    _.each(self.queries, function (query, qid) {\n      if (query.dirty) return;\n\n      if (query.matcher.documentMatches(removeDoc).result) {\n        if (query.cursor.skip || query.cursor.limit)\n          queriesToRecompute.push(qid);\n        else\n          queryRemove.push({qid: qid, doc: removeDoc});\n      }\n    });\n    self._saveOriginal(removeId, removeDoc);\n    self._docs.remove(removeId);\n  }\n\n  // run live query callbacks _after_ we've removed the documents.\n  _.each(queryRemove, function (remove) {\n    var query = self.queries[remove.qid];\n    if (query) {\n      query.distances && query.distances.remove(remove.doc._id);\n      LocalCollection._removeFromResults(query, remove.doc);\n    }\n  });\n  _.each(queriesToRecompute, function (qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query);\n  });\n  self._observeQueue.drain();\n  result = remove.length;\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// XXX atomicity: if multi is true, and one modification fails, do\n// we rollback the whole operation, or what?\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n\n  var matcher = new Minimongo.Matcher(selector);\n\n  // Save the original results of any query that we might need to\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n  // it. (We don't need to save the original results of paused queries because\n  // they already have a resultsSnapshot and we won't be diffing in\n  // _recomputeResults.)\n  var qidToOriginalResults = {};\n  // We should only clone each document once, even if it appears in multiple queries\n  var docMap = new LocalCollection._IdMap;\n  var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector);\n\n  _.each(self.queries, function (query, qid) {\n    if ((query.cursor.skip || query.cursor.limit) && ! self.paused) {\n      // Catch the case of a reactive `count()` on a cursor with skip\n      // or limit, which registers an unordered observe. This is a\n      // pretty rare case, so we just clone the entire result set with\n      // no optimizations for documents that appear in these result\n      // sets and other queries.\n      if (query.results instanceof LocalCollection._IdMap) {\n        qidToOriginalResults[qid] = query.results.clone();\n        return;\n      }\n\n      if (!(query.results instanceof Array)) {\n        throw new Error(\"Assertion failed: query.results not an array\");\n      }\n\n      // Clones a document to be stored in `qidToOriginalResults`\n      // because it may be modified before the new and old result sets\n      // are diffed. But if we know exactly which document IDs we're\n      // going to modify, then we only need to clone those.\n      var memoizedCloneIfNeeded = function(doc) {\n        if (docMap.has(doc._id)) {\n          return docMap.get(doc._id);\n        } else {\n          var docToMemoize;\n\n          if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function(id) {\n            return EJSON.equals(id, doc._id);\n          })) {\n            docToMemoize = doc;\n          } else {\n            docToMemoize = EJSON.clone(doc);\n          }\n\n          docMap.set(doc._id, docToMemoize);\n          return docToMemoize;\n        }\n      };\n\n      qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n    }\n  });\n  var recomputeQids = {};\n\n  var updateCount = 0;\n\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\n    var queryResult = matcher.documentMatches(doc);\n    if (queryResult.result) {\n      // XXX Should we save the original even if mod ends up being a no-op?\n      self._saveOriginal(id, doc);\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n      ++updateCount;\n      if (!options.multi)\n        return false;  // break\n    }\n    return true;\n  });\n\n  _.each(recomputeQids, function (dummy, qid) {\n    var query = self.queries[qid];\n    if (query)\n      self._recomputeResults(query, qidToOriginalResults[qid]);\n  });\n  self._observeQueue.drain();\n\n  // If we are doing an upsert, and we didn't modify any documents yet, then\n  // it's time to do an insert. Figure out what document we are inserting, and\n  // generate an id for it.\n  var insertedId;\n  if (updateCount === 0 && options.upsert) {\n    var newDoc = LocalCollection._removeDollarOperators(selector);\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n    if (! newDoc._id && options.insertedId)\n      newDoc._id = options.insertedId;\n    insertedId = self.insert(newDoc);\n    updateCount = 1;\n  }\n\n  // Return the number of affected documents, or in the upsert case, an object\n  // containing the number of affected docs and the id of the doc that was\n  // inserted, if any.\n  var result;\n  if (options._returnObject) {\n    result = {\n      numberAffected: updateCount\n    };\n    if (insertedId !== undefined)\n      result.insertedId = insertedId;\n  } else {\n    result = updateCount;\n  }\n\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n// true }).\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nLocalCollection.prototype._modifyAndNotify = function (\n    doc, mod, recomputeQids, arrayIndices) {\n  var self = this;\n\n  var matched_before = {};\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) continue;\n\n    if (query.ordered) {\n      matched_before[qid] = query.matcher.documentMatches(doc).result;\n    } else {\n      // Because we don't support skip or limit (yet) in unordered queries, we\n      // can just do a direct lookup.\n      matched_before[qid] = query.results.has(doc._id);\n    }\n  }\n\n  var old_doc = EJSON.clone(doc);\n\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});\n\n  for (qid in self.queries) {\n    query = self.queries[qid];\n    if (query.dirty) continue;\n\n    var before = matched_before[qid];\n    var afterMatch = query.matcher.documentMatches(doc);\n    var after = afterMatch.result;\n    if (after && query.distances && afterMatch.distance !== undefined)\n      query.distances.set(doc._id, afterMatch.distance);\n\n    if (query.cursor.skip || query.cursor.limit) {\n      // We need to recompute any query where the doc may have been in the\n      // cursor's window either before or after the update. (Note that if skip\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\n      // mean that the document is in the cursor's output after skip/limit is\n      // applied... but if they are false, then the document definitely is NOT\n      // in the output. So it's safe to skip recompute if neither before or\n      // after are true.)\n      if (before || after)\n        recomputeQids[qid] = true;\n    } else if (before && !after) {\n      LocalCollection._removeFromResults(query, doc);\n    } else if (!before && after) {\n      LocalCollection._insertInResults(query, doc);\n    } else if (before && after) {\n      LocalCollection._updateInResults(query, doc, old_doc);\n    }\n  }\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results, doc);\n      var next = query.results[i+1];\n      if (next)\n        next = next._id;\n      else\n        next = null;\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id;  // in case callback mutates doc\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id))\n    throw new Error(\"Can't change a doc's _id while updating\");\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (!_.isEmpty(changedFields)) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (!_.isEmpty(changedFields))\n    query.changed(doc._id, changedFields);\n  if (!query.sorter)\n    return;\n\n  // just take it out and put it back in again, and see if the index\n  // changes\n  query.results.splice(orig_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results, doc);\n  if (orig_idx !== new_idx) {\n    var next = query.results[new_idx+1];\n    if (next)\n      next = next._id;\n    else\n      next = null;\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\n// Recomputes the results of a query and runs observe callbacks for the\n// difference between the previous results and the current results (unless\n// paused). Used for skip/limit queries.\n//\n// When this is used by insert or remove, it can just use query.results for the\n// old results (and there's no need to pass in oldResults), because these\n// operations don't mutate the documents in the collection. Update needs to pass\n// in an oldResults which was deep-copied before the modifier was applied.\n//\n// oldResults is guaranteed to be ignored if the query is not paused.\nLocalCollection.prototype._recomputeResults = function (query, oldResults) {\n  var self = this;\n  if (self.paused) {\n    // There's no reason to recompute the results now as we're still paused.\n    // By flagging the query as \"dirty\", the recompute will be performed\n    // when resumeObservers is called.\n    query.dirty = true;\n    return;\n  }\n\n  if (! self.paused && ! oldResults)\n    oldResults = query.results;\n  if (query.distances)\n    query.distances.clear();\n  query.results = query.cursor._getRawObjects({\n    ordered: query.ordered, distances: query.distances});\n\n  if (! self.paused) {\n    LocalCollection._diffQueryChanges(\n      query.ordered, oldResults, query.results, query,\n      { projectionFn: query.projectionFn });\n  }\n};\n\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered)\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n  for (var i = 0; i < query.results.length; i++)\n    if (query.results[i] === doc)\n      return i;\n  throw Error(\"object missing from query\");\n};\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0, rangeLength = array.length;\n\n  while (rangeLength > 0) {\n    var halfRange = Math.floor(rangeLength/2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      rangeLength -= halfRange + 1;\n    } else {\n      rangeLength = halfRange;\n    }\n  }\n  return first;\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var idx = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(idx, 0, value);\n  return idx;\n};\n\n// To track what documents are affected by a piece of code, call saveOriginals()\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\n// object whose keys are the ids of the documents that were affected since the\n// call to saveOriginals(), and the values are equal to the document's contents\n// at the time of saveOriginals. (In the case of an inserted document, undefined\n// is the value.) You must alternate between calls to saveOriginals() and\n// retrieveOriginals().\nLocalCollection.prototype.saveOriginals = function () {\n  var self = this;\n  if (self._savedOriginals)\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n  self._savedOriginals = new LocalCollection._IdMap;\n};\nLocalCollection.prototype.retrieveOriginals = function () {\n  var self = this;\n  if (!self._savedOriginals)\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n  var originals = self._savedOriginals;\n  self._savedOriginals = null;\n  return originals;\n};\n\nLocalCollection.prototype._saveOriginal = function (id, doc) {\n  var self = this;\n  // Are we even trying to save originals?\n  if (!self._savedOriginals)\n    return;\n  // Have we previously mutated the original (and so 'doc' is not actually\n  // original)?  (Note the 'has' check rather than truth: we store undefined\n  // here for inserted docs!)\n  if (self._savedOriginals.has(id))\n    return;\n  self._savedOriginals.set(id, EJSON.clone(doc));\n};\n\n// Pause the observers. No callbacks from observers will fire until\n// 'resumeObservers' is called.\nLocalCollection.prototype.pauseObservers = function () {\n  // No-op if already paused.\n  if (this.paused)\n    return;\n\n  // Set the 'paused' flag such that new observer messages don't fire.\n  this.paused = true;\n\n  // Take a snapshot of the query results for each query.\n  for (var qid in this.queries) {\n    var query = this.queries[qid];\n\n    query.resultsSnapshot = EJSON.clone(query.results);\n  }\n};\n\n// Resume the observers. Observers immediately receive change\n// notifications to bring them to the current state of the\n// database. Note that this is not just replaying all the changes that\n// happened during the pause, it is a smarter 'coalesced' diff.\nLocalCollection.prototype.resumeObservers = function () {\n  var self = this;\n  // No-op if not paused.\n  if (!this.paused)\n    return;\n\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\n  // observer methods won't actually fire when we trigger them.\n  this.paused = false;\n\n  for (var qid in this.queries) {\n    var query = self.queries[qid];\n    if (query.dirty) {\n      query.dirty = false;\n      // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.\n      self._recomputeResults(query, query.resultsSnapshot);\n    } else {\n      // Diff the current results against the snapshot and send to observers.\n      // pass the query object for its observer callbacks.\n      LocalCollection._diffQueryChanges(\n        query.ordered, query.resultsSnapshot, query.results, query,\n        {projectionFn: query.projectionFn});\n    }\n    query.resultsSnapshot = null;\n  }\n  self._observeQueue.drain();\n};\n","// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (! transform)\n    return null;\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__)\n    return transform;\n\n  var wrapped = function (doc) {\n    if (!_.has(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error(\"can only transform documents with _id\");\n    }\n\n    var id = doc._id;\n    // XXX consider making tracker a weak dependency and checking Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n\n    if (!isPlainObject(transformed)) {\n      throw new Error(\"transform must return object\");\n    }\n\n    if (_.has(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error(\"transformed document can't have different _id\");\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\n// XXX maybe this should be EJSON.isArray\nisArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nisPlainObject = LocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\nisIndexable = function (x) {\n  return isArray(x) || isPlainObject(x);\n};\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nisOperatorObject = function (valueSelector, inconsistentOK) {\n  if (!isPlainObject(valueSelector))\n    return false;\n\n  var theseAreOperators = undefined;\n  _.each(valueSelector, function (value, selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK)\n        throw new Error(\"Inconsistent operator: \" +\n                        JSON.stringify(valueSelector));\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators;  // {} has no operators\n};\n\n\n// string can be converted to integer\nisNumericKey = function (s) {\n  return /^[0-9]+$/.test(s);\n};\n","// The minimongo selector compiler!\n\n// Terminology:\n//  - a \"selector\" is the EJSON object representing a selector\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a \"result object\" is an object with a \"result\" field and maybe\n//    distance and arrayIndices.\n//  - a \"branched value\" is an object with a \"value\" field and maybe\n//    \"dontIterate\" and \"arrayIndices\".\n//  - a \"document\" is a top-level object that can be stored in a collection.\n//  - a \"lookup function\" is a function that takes in a document and returns\n//    an array of \"branched values\".\n//  - a \"branched matcher\" maps from an array of branched values to a result\n//    object.\n//  - an \"element matcher\" maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nMinimongo.Matcher = function (selector) {\n  var self = this;\n  // A set (object mapping string -> *) of all of the document paths looked\n  // at by the selector. Also includes the empty string if it may look at any\n  // path (eg, $where).\n  self._paths = {};\n  // Set to true if compilation finds a $near.\n  self._hasGeoQuery = false;\n  // Set to true if compilation finds a $where.\n  self._hasWhere = false;\n  // Set to false if compilation finds anything other than a simple equality or\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\n  // scalars as operands.\n  self._isSimple = true;\n  // Set to a dummy document which always matches this Matcher. Or set to null\n  // if such document is too hard to find.\n  self._matchingDocument = undefined;\n  // A clone of the original selector. It may just be a function if the user\n  // passed in a function; otherwise is definitely an object (eg, IDs are\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n  // Sorter._useWithMatcher.\n  self._selector = null;\n  self._docMatcher = self._compileSelector(selector);\n};\n\n_.extend(Minimongo.Matcher.prototype, {\n  documentMatches: function (doc) {\n    if (!doc || typeof doc !== \"object\") {\n      throw Error(\"documentMatches needs a document\");\n    }\n    return this._docMatcher(doc);\n  },\n  hasGeoQuery: function () {\n    return this._hasGeoQuery;\n  },\n  hasWhere: function () {\n    return this._hasWhere;\n  },\n  isSimple: function () {\n    return this._isSimple;\n  },\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector: function (selector) {\n    var self = this;\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      self._isSimple = false;\n      self._selector = selector;\n      self._recordPathUsed('');\n      return function (doc) {\n        return {result: !!selector.call(doc)};\n      };\n    }\n\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) {\n      self._selector = {_id: selector};\n      self._recordPathUsed('_id');\n      return function (doc) {\n        return {result: EJSON.equals(doc._id, selector)};\n      };\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || (('_id' in selector) && !selector._id)) {\n      self._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\n        EJSON.isBinary(selector))\n      throw new Error(\"Invalid selector: \" + selector);\n\n    self._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, self, {isRoot: true});\n  },\n  _recordPathUsed: function (path) {\n    this._paths[path] = true;\n  },\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths: function () {\n    return _.keys(this._paths);\n  }\n});\n\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nvar compileDocumentSelector = function (docSelector, matcher, options) {\n  options = options || {};\n  var docMatchers = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      matcher._isSimple = false;\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\n                                              options.inElemMatch));\n    } else {\n      // Record this path, but only if we aren't in an elemMatcher, since in an\n      // elemMatch this is a path inside an object in an array, not in the doc\n      // root.\n      if (!options.inElemMatch)\n        matcher._recordPathUsed(key);\n      var lookUpByIndex = makeLookupFunction(key);\n      var valueMatcher =\n        compileValueSelector(subSelector, matcher, options.isRoot);\n      docMatchers.push(function (doc) {\n        var branchValues = lookUpByIndex(doc);\n        return valueMatcher(branchValues);\n      });\n    }\n  });\n\n  return andDocumentMatchers(docMatchers);\n};\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector));\n  } else if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  } else {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(valueSelector));\n  }\n};\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nvar convertElementMatcherToBranchedMatcher = function (\n    elementMatcher, options) {\n  options = options || {};\n  return function (branches) {\n    var expanded = branches;\n    if (!options.dontExpandLeafArrays) {\n      expanded = expandArraysInBranches(\n        branches, options.dontIncludeLeafArrays);\n    }\n    var ret = {};\n    ret.result = _.any(expanded, function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices)\n          element.arrayIndices = [matched];\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices)\n        ret.arrayIndices = element.arrayIndices;\n\n      return matched;\n    });\n    return ret;\n  };\n};\n\n// Takes a RegExp object and returns an element matcher.\nregexpElementMatcher = function (regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      // Comparing two regexps means seeing if the regexps are identical\n      // (really!). Underscore knows how.\n      return _.isEqual(value, regexp);\n    }\n    // Regexps only work against strings.\n    if (typeof value !== 'string')\n      return false;\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n};\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nequalityElementMatcher = function (elementSelector) {\n  if (isOperatorObject(elementSelector))\n    throw Error(\"Can't create equalityValueSelector for operator object\");\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  if (elementSelector == null) {  // undefined or null\n    return function (value) {\n      return value == null;  // undefined or null\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n};\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n\n  var operatorMatchers = [];\n  _.each(valueSelector, function (operand, operator) {\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\n      _.isNumber(operand);\n    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\n      _.isArray(operand) && !_.any(operand, _.isObject);\n\n    if (! (simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (_.has(VALUE_OPERATORS, operator)) {\n      operatorMatchers.push(\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      operatorMatchers.push(\n        convertElementMatcherToBranchedMatcher(\n          options.compileElementSelector(\n            operand, valueSelector, matcher),\n          options));\n    } else {\n      throw new Error(\"Unrecognized operator: \" + operator);\n    }\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n};\n\nvar compileArrayOfDocumentSelectors = function (\n    selectors, matcher, inElemMatch) {\n  if (!isArray(selectors) || _.isEmpty(selectors))\n    throw Error(\"$and/$or/$nor must be nonempty array\");\n  return _.map(selectors, function (subSelector) {\n    if (!isPlainObject(subSelector))\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\n    return compileDocumentSelector(\n      subSelector, matcher, {inElemMatch: inElemMatch});\n  });\n};\n\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return andDocumentMatchers(matchers);\n  },\n\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1)\n      return matchers[0];\n\n    return function (doc) {\n      var result = _.any(matchers, function (f) {\n        return f(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result: result};\n    };\n  },\n\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(\n      subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = _.all(matchers, function (f) {\n        return !f(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // \"matched\" (and because this is consistent with MongoDB).\n      return {result: result};\n    };\n  },\n\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add \"return\"; not sure exactly what it is.\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\n    }\n    return function (doc) {\n      // We make the document available as both `this` and `obj`.\n      // XXX not sure what we should do if this throws\n      return {result: selectorValue.call(doc, doc)};\n    };\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {result: true};\n    };\n  }\n};\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nvar invertBranchedMatcher = function (branchedMatcher) {\n  return function (branchValues) {\n    var invertMe = branchedMatcher(branchValues);\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !invertMe.result};\n  };\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!_.has(valueSelector, '$regex'))\n      throw Error(\"$options needs a $regex\");\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near)\n      throw Error(\"$maxDistance needs a $near\");\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!isArray(operand))\n      throw Error(\"$all requires array\");\n    // Not sure why, but this seems to be what MongoDB does.\n    if (_.isEmpty(operand))\n      return nothingMatcher;\n\n    var branchedMatchers = [];\n    _.each(operand, function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion))\n        throw Error(\"no $ expressions in $all\");\n      // This is always a regexp or equality selector.\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\n    });\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot)\n      throw Error(\"$near can't be inside another $ operator\");\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property.\n\n    var maxDistance, point, distance;\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value || !value.type)\n          return null;\n        if (value.type === \"Point\") {\n          return GeoJSON.pointDistance(point, value);\n        } else {\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n            ? 0 : maxDistance + 1;\n        }\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isArray(operand) && !isPlainObject(operand))\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isArray(value) && !isPlainObject(value))\n          return null;\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      branchedValues = expandArraysInBranches(branchedValues);\n      var result = {result: false};\n      _.each(branchedValues, function (branch) {\n        var curDistance = distance(branch.value);\n        // Skip branches that aren't real points or are too far away.\n        if (curDistance === null || curDistance > maxDistance)\n          return;\n        // Skip anything that's a tie.\n        if (result.distance !== undefined && result.distance <= curDistance)\n          return;\n        result.result = true;\n        result.distance = curDistance;\n        if (!branch.arrayIndices)\n          delete result.arrayIndices;\n        else\n          result.arrayIndices = branch.arrayIndices;\n      });\n      return result;\n    };\n  }\n};\n\n// Helpers for $near.\nvar distanceCoordinatePairs = function (a, b) {\n  a = pointToArray(a);\n  b = pointToArray(b);\n  var x = a[0] - b[0];\n  var y = a[1] - b[1];\n  if (_.isNaN(x) || _.isNaN(y))\n    return null;\n  return Math.sqrt(x * x + y * y);\n};\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nvar pointToArray = function (point) {\n  return _.map(point, _.identity);\n};\n\n// Helper for $lt/$gt/$lte/$gte.\nvar makeInequality = function (cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined)\n        operand = null;\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined)\n          value = null;\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType)\n          return false;\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n};\n\nvar isBitSet = function (value, bit) {\n  if (value === 0)\n    return false;\n  return (value & 1 << bit) !== 0;\n};\n\nvar eightBits = [0,1,2,3,4,5,6,7];\nvar get8BitsSet = function (value) {\n  if (value === 0)\n    return [];\n  return _.filter(eightBits, function (bit) {\n    return isBitSet(value, bit);\n  });\n};\n\nvar convertNumberToUint8Array = function(number) {\n  var numOfBits = number.toString(2).length;\n  var num8BitGroups = Math.ceil(numOfBits / 8);\n  var byteArray = new Uint8Array(num8BitGroups);\n\n  for (var i = 0; i < byteArray.length; i++) {\n    var byte = number & 0xff;\n    byteArray[i] = byte;\n    number = (number - byte) / 256;\n  }\n\n  return byteArray;\n};\n\nvar ensureUint8Array = function (number) {\n  return (number instanceof Uint8Array) ?\n    number : convertNumberToUint8Array(number);\n};\n\nvar ensureOperandUint8Array = function (operand) {\n  if (!(operand instanceof Uint8Array)) {\n    operand = _.reduce(operand, function (num, n) {\n      return num | (1 << n);\n    }, 0);\n\n    operand = convertNumberToUint8Array(operand);\n  }\n\n  return operand;\n};\n\nvar bitsClear = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) === -1;\n    })\n  );\n};\n\nvar bitsSet = function (bitsSetOp, bitsSetVal) {\n  return _.isUndefined(\n    _.find(bitsSetOp, function (bit) {\n      return bitsSetVal.indexOf(bit) !== -1;\n    })\n  );\n};\n\nvar anyBitCompare = function (operand, value, setOrClear) {\n  return _.isUndefined(\n    _.find(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return setOrClear(bitsSetOp, bitsSetVal);\n    })\n  );\n};\n\nvar allBitCompare = function (operand, value, setOrClear) {\n  return _.filter(operand, function (op, i) {\n      var bitsSetOp = get8BitsSet(op);\n      var bitsSetVal = get8BitsSet(value[i]);\n\n      return !setOrClear(bitsSetOp, bitsSetVal);\n    }).length === 0;\n};\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(isArray(operand) && operand.length === 2\n            && typeof(operand[0]) === 'number'\n            && typeof(operand[1]) === 'number')) {\n        throw Error(\"argument to $mod must be an array of two numbers\");\n      }\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!isArray(operand))\n        throw Error(\"$in needs an array\");\n\n      var elementMatchers = [];\n      _.each(operand, function (option) {\n        if (option instanceof RegExp)\n          elementMatchers.push(regexpElementMatcher(option));\n        else if (isOperatorObject(option))\n          throw Error(\"cannot nest $ under $in\");\n        else\n          elementMatchers.push(equalityElementMatcher(option));\n      });\n\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined)\n          value = null;\n        return _.any(elementMatchers, function (e) {\n          return e(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error(\"$size needs a number\");\n      }\n      return function (value) {\n        return isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand !== 'number')\n        throw Error(\"$type needs a number\");\n      return function (value) {\n        return value !== undefined\n          && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnyClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return anyBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllClear has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        if (value === 0)\n          return true;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsSet);\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAllSet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return allBitCompare(operand, value, bitsClear);\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isArray(operand) && !(operand instanceof Uint8Array))\n        throw Error(\"$bitsAnySet has to be an Array\");\n      return function (value) {\n        if (typeof value !== 'number' && !(value instanceof Uint8Array))\n          return false;\n\n        operand = ensureOperandUint8Array(operand);\n        value = ensureUint8Array(value);\n\n        return _.isUndefined(\n          _.find(operand, function (op, i) {\n            var bitsSetOp = get8BitsSet(op);\n            var bitsSetVal = get8BitsSet(value[i]);\n\n            return bitsSet(bitsSetOp, bitsSetVal);\n          })\n        );\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\n        throw Error(\"$regex has to be a string or RegExp\");\n\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself. (See also\n        // Mongo.Collection._rewriteSelector.)\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options))\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(regexSource, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!isPlainObject(operand))\n        throw Error(\"$elemMatch need an object\");\n\n      var subMatcher, isDocMatcher;\n      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {\n        subMatcher = compileValueSelector(operand, matcher);\n        isDocMatcher = false;\n      } else {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher,\n                                             {inElemMatch: true});\n        isDocMatcher = true;\n      }\n\n      return function (value) {\n        if (!isArray(value))\n          return false;\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\n              return false;\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result)\n            return i;   // specially understood to mean \"use as arrayIndices\"\n        }\n        return false;\n      };\n    }\n  }\n};\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively \"branch\" over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like \"implicit\", but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nmakeLookupFunction = function (key, options) {\n  options = options || {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var firstPartIsNumeric = isNumericKey(firstPart);\n  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);\n  var lookupRest;\n  if (parts.length > 1) {\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\n  }\n\n  var omitUnnecessaryFields = function (retVal) {\n    if (!retVal.dontIterate)\n      delete retVal.dontIterate;\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\n      delete retVal.arrayIndices;\n    return retVal;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (!arrayIndices)\n      arrayIndices = [];\n\n    if (isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(firstPartIsNumeric && firstPart < doc.length))\n        return [];\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as \"don't iterate\".\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        value: firstLevel,\n        dontIterate: isArray(doc) && isArray(firstLevel),\n        arrayIndices: arrayIndices})];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (isArray(doc))\n        return [];\n      return [omitUnnecessaryFields({value: undefined,\n                                      arrayIndices: arrayIndices})];\n    }\n\n    var result = [];\n    var appendToResult = function (more) {\n      Array.prototype.push.apply(result, more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also \"branch\": try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // \"look up this index\" in that case, not \"also look up this index in all\n    // the elements of the array\".\n    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {\n      _.each(firstLevel, function (branch, arrayIndex) {\n        if (isPlainObject(branch)) {\n          appendToResult(lookupRest(\n            branch,\n            arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n};\nMinimongoTest.makeLookupFunction = makeLookupFunction;\n\nexpandArraysInBranches = function (branches, skipTheArrays) {\n  var branchesOut = [];\n  _.each(branches, function (branch) {\n    var thisIsArray = isArray(branch.value);\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        value: branch.value,\n        arrayIndices: branch.arrayIndices\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      _.each(branch.value, function (leaf, i) {\n        branchesOut.push({\n          value: leaf,\n          arrayIndices: (branch.arrayIndices || []).concat(i)\n        });\n      });\n    }\n  });\n  return branchesOut;\n};\n\nvar nothingMatcher = function (docOrBranchedValues) {\n  return {result: false};\n};\n\nvar everythingMatcher = function (docOrBranchedValues) {\n  return {result: true};\n};\n\n\n// NB: We are cheating and using this function to implement \"AND\" for both\n// \"document matchers\" and \"branched matchers\". They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of \"branched values\".\nvar andSomeMatchers = function (subMatchers) {\n  if (subMatchers.length === 0)\n    return everythingMatcher;\n  if (subMatchers.length === 1)\n    return subMatchers[0];\n\n  return function (docOrBranches) {\n    var ret = {};\n    ret.result = _.all(subMatchers, function (f) {\n      var subResult = f(docOrBranches);\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined\n          && ret.distance === undefined) {\n        ret.distance = subResult.distance;\n      }\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        ret.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!ret.result) {\n      delete ret.distance;\n      delete ret.arrayIndices;\n    }\n    return ret;\n  };\n};\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      // note that typeof(/x/) === \"object\"\n      return 11;\n    if (typeof v === \"function\")\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof MongoID.ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// Oddball function used by upsert.\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n","// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nMinimongo.Sorter = function (spec, options) {\n  var self = this;\n  options = options || {};\n\n  self._sortSpecParts = [];\n  self._sortFunction = null;\n\n  var addSpecPart = function (path, ascending) {\n    if (!path)\n      throw Error(\"sort keys must be non-empty\");\n    if (path.charAt(0) === '$')\n      throw Error(\"unsupported sort key: \" + path);\n    self._sortSpecParts.push({\n      path: path,\n      lookup: makeLookupFunction(path, {forSort: true}),\n      ascending: ascending\n    });\n  };\n\n  if (spec instanceof Array) {\n    for (var i = 0; i < spec.length; i++) {\n      if (typeof spec[i] === \"string\") {\n        addSpecPart(spec[i], true);\n      } else {\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\n      }\n    }\n  } else if (typeof spec === \"object\") {\n    _.each(spec, function (value, key) {\n      addSpecPart(key, value >= 0);\n    });\n  } else if (typeof spec === \"function\") {\n    self._sortFunction = spec;\n  } else {\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n  }\n\n  // If a function is specified for sorting, we skip the rest.\n  if (self._sortFunction)\n    return;\n\n  // To implement affectedByModifier, we piggy-back on top of Matcher's\n  // affectedByModifier code; we create a selector that is affected by the same\n  // modifiers as this sort order. This is only implemented on the server.\n  if (self.affectedByModifier) {\n    var selector = {};\n    _.each(self._sortSpecParts, function (spec) {\n      selector[spec.path] = 1;\n    });\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n  }\n\n  self._keyComparator = composeComparators(\n    _.map(self._sortSpecParts, function (spec, i) {\n      return self._keyFieldComparator(i);\n    }));\n\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a\n  // function which selects whether or not a given \"sort key\" (tuple of values\n  // for the different sort spec fields) is compatible with the selector.\n  self._keyFilter = null;\n  options.matcher && self._useWithMatcher(options.matcher);\n};\n\n// In addition to these methods, sorter_project.js defines combineIntoProjection\n// on the server only.\n_.extend(Minimongo.Sorter.prototype, {\n  getComparator: function (options) {\n    var self = this;\n\n    // If we have no distances, just use the comparator from the source\n    // specification (which defaults to \"everything is equal\".\n    if (!options || !options.distances) {\n      return self._getBaseComparator();\n    }\n\n    var distances = options.distances;\n\n    // Return a comparator which first tries the sort specification, and if that\n    // says \"it's equal\", breaks ties using $near distances.\n    return composeComparators([self._getBaseComparator(), function (a, b) {\n      if (!distances.has(a._id))\n        throw Error(\"Missing distance for \" + a._id);\n      if (!distances.has(b._id))\n        throw Error(\"Missing distance for \" + b._id);\n      return distances.get(a._id) - distances.get(b._id);\n    }]);\n  },\n\n  _getPaths: function () {\n    var self = this;\n    return _.pluck(self._sortSpecParts, 'path');\n  },\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc: function (doc) {\n    var self = this;\n    var minKey = null;\n\n    self._generateKeysFromDoc(doc, function (key) {\n      if (!self._keyCompatibleWithSelector(key))\n        return;\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n      if (self._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null)\n      throw Error(\"sort selector found no keys in doc?\");\n    return minKey;\n  },\n\n  _keyCompatibleWithSelector: function (key) {\n    var self = this;\n    return !self._keyFilter || self._keyFilter(key);\n  },\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc: function (doc, cb) {\n    var self = this;\n\n    if (self._sortSpecParts.length === 0)\n      throw new Error(\"can't generate keys without a spec\");\n\n    // maps index -> ({'' -> value} or {path -> value})\n    var valuesByIndexAndPath = [];\n\n    var pathFromIndices = function (indices) {\n      return indices.join(',') + ',';\n    };\n\n    var knownPaths = null;\n\n    _.each(self._sortSpecParts, function (spec, whichField) {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length)\n        branches = [{value: null}];\n\n      var usedPaths = false;\n      valuesByIndexAndPath[whichField] = {};\n      _.each(branches, function (branch) {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1)\n            throw Error(\"multiple branches but no array used?\");\n          valuesByIndexAndPath[whichField][''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n        var path = pathFromIndices(branch.arrayIndices);\n        if (_.has(valuesByIndexAndPath[whichField], path))\n          throw Error(\"duplicate path: \" + path);\n        valuesByIndexAndPath[whichField][path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !_.has(knownPaths, path)) {\n          throw Error(\"cannot index parallel arrays\");\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\n          throw Error(\"cannot index parallel arrays!\");\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {\n          knownPaths[path] = true;\n        });\n      }\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {\n        if (!_.has(values, ''))\n          throw Error(\"no value in sole key case?\");\n        return values[''];\n      });\n      cb(soleKey);\n      return;\n    }\n\n    _.each(knownPaths, function (x, path) {\n      var key = _.map(valuesByIndexAndPath, function (values) {\n        if (_.has(values, ''))\n          return values[''];\n        if (!_.has(values, path))\n          throw Error(\"missing path?\");\n        return values[path];\n      });\n      cb(key);\n    });\n  },\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys: function (key1, key2) {\n    var self = this;\n    if (key1.length !== self._sortSpecParts.length ||\n        key2.length !== self._sortSpecParts.length) {\n      throw Error(\"Key has wrong length\");\n    }\n\n    return self._keyComparator(key1, key2);\n  },\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator: function (i) {\n    var self = this;\n    var invert = !self._sortSpecParts[i].ascending;\n    return function (key1, key2) {\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      if (invert)\n        compare = -compare;\n      return compare;\n    };\n  },\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator: function () {\n    var self = this;\n\n    if (self._sortFunction)\n      return self._sortFunction;\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!self._sortSpecParts.length) {\n      return function (doc1, doc2) {\n        return 0;\n      };\n    }\n\n    return function (doc1, doc2) {\n      var key1 = self._getMinKeyFromDoc(doc1);\n      var key2 = self._getMinKeyFromDoc(doc2);\n      return self._compareKeys(key1, key2);\n    };\n  },\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher: function (matcher) {\n    var self = this;\n\n    if (self._keyFilter)\n      throw Error(\"called _useWithMatcher twice?\");\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (_.isEmpty(self._sortSpecParts))\n      return;\n\n    var selector = matcher._selector;\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function)\n      return;\n\n    var constraintsByPath = {};\n    _.each(self._sortSpecParts, function (spec, i) {\n      constraintsByPath[spec.path] = [];\n    });\n\n    _.each(selector, function (subSelector, key) {\n      // XXX support $and and $or\n\n      var constraints = constraintsByPath[key];\n      if (!constraints)\n        return;\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline)\n          return;\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        _.each(subSelector, function (operand, operator) {\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand, subSelector));\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))\n      return;\n\n    self._keyFilter = function (key) {\n      return _.all(self._sortSpecParts, function (specPart, index) {\n        return _.all(constraintsByPath[specPart.path], function (f) {\n          return f(key[index]);\n        });\n      });\n    };\n  }\n});\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nvar composeComparators = function (comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0)\n        return compare;\n    }\n    return 0;\n  };\n};\n","// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (_.isArray(doc))\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\n\n    var res = details.including ? {} : EJSON.clone(doc);\n    _.each(ruleTree, function (rule, key) {\n      if (!_.has(doc, key))\n        return;\n      if (_.isObject(rule)) {\n        // For sub-objects/subsets we branch\n        if (_.isObject(doc[key]))\n          res[key] = transform(doc[key], rule);\n        // Otherwise we don't even touch this subfield\n      } else if (details.including)\n        res[key] = EJSON.clone(doc[key]);\n      else\n        delete res[key];\n    });\n\n    return res;\n  };\n\n  return function (obj) {\n    var res = transform(obj, details.tree);\n\n    if (_idProjection && _.has(obj, '_id'))\n      res._id = obj._id;\n    if (!_idProjection && _.has(res, '_id'))\n      delete res._id;\n    return res;\n  };\n};\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nprojectionDetails = function (fields) {\n  // Find the non-_id keys (_id is handled specially because it is included unless\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = _.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (fieldsKeys.length > 0 &&\n      !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(_.contains(fieldsKeys, '_id') && fields['_id']))\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\n\n  var including = null; // Unknown\n\n  _.each(fieldsKeys, function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null)\n      including = rule;\n    if (including !== rule)\n      // This error message is copied from MongoDB shell\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n  });\n\n\n  var projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    function (path) { return including; },\n    function (node, path, fullPath) {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n      //\n      // Note, how second time the return set of keys is different.\n\n      var currentPath = fullPath;\n      var anotherPath = path;\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\n                           \" found in fields option, using both of them may trigger \" +\n                           \"unexpected behavior. Did you mean to use only one of them?\");\n    });\n\n  return {\n    tree: projectionRulesTree,\n    including: including\n  };\n};\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\n  tree = tree || {};\n  _.each(paths, function (keyPath) {\n    var treePos = tree;\n    var pathArr = keyPath.split('.');\n\n    // use _.all just for iteration with break\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n      if (!_.has(treePos, key))\n        treePos[key] = {};\n      else if (!_.isObject(treePos[key])) {\n        treePos[key] = conflictFn(treePos[key],\n                                  pathArr.slice(0, idx + 1).join('.'),\n                                  keyPath);\n        // break out of loop if we are failing for this path\n        if (!_.isObject(treePos[key]))\n          return false;\n      }\n\n      treePos = treePos[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = _.last(pathArr);\n      if (!_.has(treePos, lastKey))\n        treePos[lastKey] = newLeafFn(keyPath);\n      else\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n    }\n  });\n\n  return tree;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (!_.isObject(fields) || _.isArray(fields))\n    throw MinimongoError(\"fields option must be an object\");\n\n  _.each(fields, function (val, keyPath) {\n    if (_.contains(keyPath.split('.'), '$'))\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n    if (typeof val === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0)\n      throw MinimongoError(\"Minimongo doesn't support operators in projections yet.\");\n    if (_.indexOf([1, 0, true, false], val) === -1)\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n  });\n};\n","// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, mod, options) {\n  options = options || {};\n  if (!isPlainObject(mod))\n    throw MinimongoError(\"Modifier must be an object\");\n\n  // Make sure the caller can't mutate our data structures.\n  mod = EJSON.clone(mod);\n\n  var isModifier = isOperatorObject(mod);\n\n  var newDoc;\n\n  if (!isModifier) {\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    // replace the whole document\n    for (var k in mod) {\n      if (/\\./.test(k))\n        throw MinimongoError(\n          \"When replacing document, field name may not contain '.'\");\n    }\n    newDoc = mod;\n  } else {\n    // apply modifiers to the doc.\n    newDoc = EJSON.clone(doc);\n\n    _.each(mod, function (operand, op) {\n      var modFunc = MODIFIERS[op];\n      // Treat $setOnInsert as $set if this is an insert.\n      if (options.isInsert && op === '$setOnInsert')\n        modFunc = MODIFIERS['$set'];\n      if (!modFunc)\n        throw MinimongoError(\"Invalid modifier specified \" + op);\n      _.each(operand, function (arg, keypath) {\n        if (keypath === '') {\n          throw MinimongoError(\"An empty update path is not valid.\");\n        }\n\n        if (keypath === '_id' && op !== '$setOnInsert') {\n          throw MinimongoError(\"Mod on _id not allowed\");\n        }\n\n        var keyparts = keypath.split('.');\n\n        if (! _.all(keyparts, _.identity)) {\n          throw MinimongoError(\n            \"The update path '\" + keypath +\n              \"' contains an empty field name, which is not allowed.\");\n        }\n\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);\n        var forbidArray = (op === \"$rename\");\n        var target = findModTarget(newDoc, keyparts, {\n          noCreate: NO_CREATE_MODIFIERS[op],\n          forbidArray: (op === \"$rename\"),\n          arrayIndices: options.arrayIndices\n        });\n        var field = keyparts.pop();\n        modFunc(target, field, arg, keypath, newDoc);\n      });\n    });\n  }\n\n  // move new document into place.\n  _.each(_.keys(doc), function (k) {\n    // Note: this used to be for (var k in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (k !== '_id')\n      delete doc[k];\n  });\n  _.each(newDoc, function (v, k) {\n    doc[k] = v;\n  });\n};\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nvar findModTarget = function (doc, keyparts, options) {\n  options = options || {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = (i === keyparts.length - 1);\n    var keypart = keyparts[i];\n    var indexable = isIndexable(doc);\n    if (!indexable) {\n      if (options.noCreate)\n        return undefined;\n      var e = MinimongoError(\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray)\n        return null;\n      if (keypart === '$') {\n        if (usedArrayIndex)\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\"The positional operator did not find the \" +\n                               \"match needed from the query\");\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate)\n          return undefined;\n        throw MinimongoError(\n          \"can't append to array using string field name [\"\n                    + keypart + \"]\");\n      }\n      if (last)\n        // handle 'a.01'\n        keyparts[i] = keypart;\n      if (options.noCreate && keypart >= doc.length)\n        return undefined;\n      while (doc.length < keypart)\n        doc.push(null);\n      if (!last) {\n        if (doc.length === keypart)\n          doc.push({});\n        else if (typeof doc[keypart] !== \"object\")\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\n      }\n    } else {\n      if (keypart.length && keypart.substr(0, 1) === '$')\n        throw MinimongoError(\"can't set field named \" + keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate)\n          return undefined;\n        if (!last)\n          doc[keypart] = {};\n      }\n    }\n\n    if (last)\n      return doc;\n    doc = doc[keypart];\n  }\n\n  // notreached\n};\n\nvar NO_CREATE_MODIFIERS = {\n  $unset: true,\n  $pop: true,\n  $rename: true,\n  $pull: true,\n  $pullAll: true\n};\n\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if (typeof arg === \"object\" && arg.hasOwnProperty(\"$type\")) {\n       if (arg.$type !== \"date\") {\n         throw MinimongoError(\"Minimongo does currently only support the date type in $currentDate modifiers\");\n       }\n    } else if (arg !== true) {\n      throw MinimongoError(\"Invalid $currentDate modifier\");\n    }\n    target[field] = new Date();\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== \"number\") {\n      throw MinimongoError(\"Modifier $min allowed for numbers only\");\n    }\n    if (field in target) {\n      if (typeof target[field] !== \"number\") {\n        throw MinimongoError(\"Cannot apply $min modifier to non-number\");\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== \"number\") {\n      throw MinimongoError(\"Modifier $max allowed for numbers only\");\n    }\n    if (field in target) {\n      if (typeof target[field] !== \"number\") {\n        throw MinimongoError(\"Cannot apply $max modifier to non-number\");\n      }\n      if (target[field] < arg) {\n         target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== \"number\")\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");\n    if (field in target) {\n      if (typeof target[field] !== \"number\")\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (!_.isObject(target)) { // not an array or an object\n      var e = MinimongoError(\"Cannot set property on non-object field\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (target === null) {\n      var e = MinimongoError(\"Cannot set property on null\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (_.isString(field) && field.indexOf('\\0') > -1) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(`Key ${field} must not contain null bytes`);\n    }\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target)\n          target[field] = null;\n      } else\n        delete target[field];\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined)\n      target[field] = [];\n    if (!(target[field] instanceof Array))\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array))\n      throw MinimongoError(\"$each must be an array\");\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== \"number\")\n        throw MinimongoError(\"$position must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$position < 0)\n        throw MinimongoError(\"$position in $push must be zero or positive\");\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== \"number\")\n        throw MinimongoError(\"$slice must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$slice > 0)\n        throw MinimongoError(\"$slice in $push must be zero or negative\");\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined)\n        throw MinimongoError(\"$sort requires $slice to be present\");\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      for (var i = 0; i < toPush.length; i++) {\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\n          throw MinimongoError(\"$push like modifiers using $sort \" +\n                      \"require all elements to be objects\");\n        }\n      }\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      for (var j = 0; j < toPush.length; j++)\n        target[field].push(toPush[j]);\n    } else {\n      var spliceArguments = [position, 0];\n      for (var j = 0; j < toPush.length; j++)\n        spliceArguments.push(toPush[j]);\n      Array.prototype.splice.apply(target[field], spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction)\n      target[field].sort(sortFunction);\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0)\n        target[field] = [];  // differs from Array.slice!\n      else\n        target[field] = target[field].slice(slice);\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    var x = target[field];\n    if (x === undefined)\n      target[field] = arg;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");\n    else {\n      for (var i = 0; i < arg.length; i++)\n        x.push(arg[i]);\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (typeof arg === \"object\") {\n      //check if first key is '$each'\n      for (var k in arg) {\n        if (k === \"$each\")\n          isEach = true;\n        break;\n      }\n    }\n    var values = isEach ? arg[\"$each\"] : [arg];\n    var x = target[field];\n    if (x === undefined)\n      target[field] = values;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");\n    else {\n      _.each(values, function (value) {\n        for (var i = 0; i < x.length; i++)\n          if (LocalCollection._f._equal(value, x[i]))\n            return;\n        x.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");\n    else {\n      if (typeof arg === 'number' && arg < 0)\n        x.splice(0, 1);\n      else\n        x.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      if (arg != null && typeof arg === \"object\" && !(arg instanceof Array)) {\n        // XXX would be much nicer to compile this once, rather than\n        // for each document we modify.. but usually we're not\n        // modifying that many documents, so we'll let it slide for\n        // now\n\n        // XXX Minimongo.Matcher isn't up for the job, because we need\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n        // like {$gt: 4} is not normally a complete selector.\n        // same issue as $elemMatch possibly?\n        var matcher = new Minimongo.Matcher(arg);\n        for (var i = 0; i < x.length; i++)\n          if (!matcher.documentMatches(x[i]).result)\n            out.push(x[i]);\n      } else {\n        for (var i = 0; i < x.length; i++)\n          if (!LocalCollection._f._equal(x[i], arg))\n            out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = [];\n      for (var i = 0; i < x.length; i++) {\n        var exclude = false;\n        for (var j = 0; j < arg.length; j++) {\n          if (LocalCollection._f._equal(x[i], arg[j])) {\n            exclude = true;\n            break;\n          }\n        }\n        if (!exclude)\n          out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    if (keypath === arg)\n      // no idea why mongo has this restriction..\n      throw MinimongoError(\"$rename source must differ from target\");\n    if (target === null)\n      throw MinimongoError(\"$rename source field invalid\");\n    if (typeof arg !== \"string\")\n      throw MinimongoError(\"$rename target must be a string\");\n    if (arg.indexOf('\\0') > -1) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\"The 'to' field for $rename cannot contain an embedded null byte\");\n    }\n    if (target === undefined)\n      return;\n    var v = target[field];\n    delete target[field];\n\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});\n    if (target2 === null)\n      throw MinimongoError(\"$rename target field invalid\");\n    var field2 = keyparts.pop();\n    target2[field2] = v;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError(\"$bit is not supported\");\n  }\n};\n","// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\n\n\nLocalCollection._diffQueryOrderedChanges =\n  function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n","LocalCollection._IdMap = function () {\n  var self = this;\n  IdMap.call(self, MongoID.idStringify, MongoID.idParse);\n};\n\nMeteor._inherits(LocalCollection._IdMap, IdMap);\n\n","// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in self.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function (options) {\n  var self = this;\n  options = options || {};\n\n  var orderedFromCallbacks = options.callbacks &&\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n  if (_.has(options, 'ordered')) {\n    self.ordered = options.ordered;\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\n      throw Error(\"ordered option doesn't match callbacks\");\n  } else if (options.callbacks) {\n    self.ordered = orderedFromCallbacks;\n  } else {\n    throw Error(\"must provide ordered or callbacks\");\n  }\n  var callbacks = options.callbacks || {};\n\n  if (self.ordered) {\n    self.docs = new OrderedDict(MongoID.idStringify);\n    self.applyChange = {\n      addedBefore: function (id, fields, before) {\n        var doc = EJSON.clone(fields);\n        doc._id = id;\n        callbacks.addedBefore && callbacks.addedBefore.call(\n          self, id, fields, before);\n        // This line triggers if we provide added with movedBefore.\n        callbacks.added && callbacks.added.call(self, id, fields);\n        // XXX could `before` be a falsy ID?  Technically\n        // idStringify seems to allow for them -- though\n        // OrderedDict won't call stringify on a falsy arg.\n        self.docs.putBefore(id, doc, before || null);\n      },\n      movedBefore: function (id, before) {\n        var doc = self.docs.get(id);\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n        self.docs.moveBefore(id, before || null);\n      }\n    };\n  } else {\n    self.docs = new LocalCollection._IdMap;\n    self.applyChange = {\n      added: function (id, fields) {\n        var doc = EJSON.clone(fields);\n        callbacks.added && callbacks.added.call(self, id, fields);\n        doc._id = id;\n        self.docs.set(id,  doc);\n      }\n    };\n  }\n\n  // The methods in _IdMap and OrderedDict used by these callbacks are\n  // identical.\n  self.applyChange.changed = function (id, fields) {\n    var doc = self.docs.get(id);\n    if (!doc)\n      throw new Error(\"Unknown id for changed: \" + id);\n    callbacks.changed && callbacks.changed.call(\n      self, id, EJSON.clone(fields));\n    DiffSequence.applyChanges(doc, fields);\n  };\n  self.applyChange.removed = function (id) {\n    callbacks.removed && callbacks.removed.call(self, id);\n    self.docs.remove(id);\n  };\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {return doc;};\n  var suppressed = !!observeCallbacks._suppress_initial;\n\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var self = this;\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\n          return;\n        var doc = transform(_.extend(fields, {_id: id}));\n        if (observeCallbacks.addedAt) {\n          var index = indices\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n          observeCallbacks.addedAt(doc, index, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\n          return;\n        var doc = EJSON.clone(self.docs.get(id));\n        if (!doc)\n          throw new Error(\"Unknown id for changed: \" + id);\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        doc = transform(doc);\n        if (observeCallbacks.changedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.changedAt(doc, oldDoc, index);\n        } else {\n          observeCallbacks.changed(doc, oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        var self = this;\n        if (!observeCallbacks.movedTo)\n          return;\n        var from = indices ? self.docs.indexOf(id) : -1;\n\n        var to = indices\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from)\n          --to;\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\n                                 from, to, before || null);\n      },\n      removed: function (id) {\n        var self = this;\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\n          return;\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from self.docs!\n        var doc = transform(self.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.removedAt(doc, index);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          var doc = _.extend(fields, {_id:  id});\n          observeCallbacks.added(transform(doc));\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (observeCallbacks.changed) {\n          var oldDoc = self.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc),\n                                   transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        var self = this;\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(self.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver(\n    {callbacks: observeChangesCallbacks});\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n\n  return handle;\n};\n","// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\n\n"]}