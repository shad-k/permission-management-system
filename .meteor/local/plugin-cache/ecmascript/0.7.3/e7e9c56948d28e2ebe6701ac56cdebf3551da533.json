{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Messages"],"specifiers":[{"kind":"local","local":"Messages","exported":"Messages"}]}}},"options":{"filename":"/imports/api/messages.js","filenameRelative":"/imports/api/messages.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/messages.js.map","sourceFileName":"/imports/api/messages.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"messages"},"ignored":false,"code":"module.export({\n\tMessages: function () {\n\t\treturn Messages;\n\t}\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n\tMeteor: function (v) {\n\t\tMeteor = v;\n\t}\n}, 0);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n\tMongo: function (v) {\n\t\tMongo = v;\n\t}\n}, 1);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n\tcheck: function (v) {\n\t\tcheck = v;\n\t}\n}, 2);\nvar Messages = new Mongo.Collection('messages');\nMeteor.methods({\n\t'messages.insert': function (text) {\n\t\t// This method is used to insert new messages into the collection\n\t\tcheck(text, String); // Make sure the user is logged in before inserting a message\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('not-authorized');\n\t\t}\n\n\t\tMessages.insert({\n\t\t\ttext: text,\n\t\t\tcreatedAt: new Date(),\n\t\t\towner: Meteor.userId(),\n\t\t\tusername: Meteor.user().username\n\t\t});\n\t},\n\t'messages.remove': function (id) {\n\t\t// This method removes a message that the admin wishes to delete\n\t\tcheck(id, String);\n\n\t\tif (Roles.userIsInRole(Meteor.userId(), 'admin', Roles.GLOBAL_GROUP)) {\n\t\t\tMessages.remove(id);\n\t\t}\n\t}\n});","map":{"version":3,"sources":["/imports/api/messages.js"],"names":["module","export","Messages","Meteor","importSync","v","Mongo","check","Collection","methods","text","String","userId","Error","insert","createdAt","Date","owner","username","user","id","Roles","userIsInRole","GLOBAL_GROUP","remove"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAS;AAAA,SAAIA,QAAJ;AAAA;AAAV,CAAd;AAAuC,IAAIC,eAAJ;AAAWH,OAAOI,UAAP,CAAkB,eAAlB,EAAkC;AAACD,SAAO,UAASE,CAAT,EAAW;AAACF,WAAOE,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,cAAJ;AAAUN,OAAOI,UAAP,CAAkB,cAAlB,EAAiC;AAACE,QAAM,UAASD,CAAT,EAAW;AAACC,UAAMD,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAAiE,IAAIE,cAAJ;AAAUP,OAAOI,UAAP,CAAkB,cAAlB,EAAiC;AAACG,QAAM,UAASF,CAAT,EAAW;AAACE,UAAMF,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAQpM,IAAMH,WAAW,IAAII,MAAME,UAAV,CAAqB,UAArB,CAAjB;AAGPL,OAAOM,OAAP,CAAe;AACd,kBADc,YACIC,IADJ,EACU;AACvB;AACAH,QAAMG,IAAN,EAAYC,MAAZ,EAFuB,CAIvB;;AACG,MAAI,CAAER,OAAOS,MAAP,EAAN,EAAuB;AACrB,SAAM,IAAIT,OAAOU,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDX,WAASY,MAAT,CAAgB;AACfJ,aADe;AAEfK,cAAW,IAAIC,IAAJ,EAFI;AAGfC,UAAOd,OAAOS,MAAP,EAHQ;AAIfM,aAAUf,OAAOgB,IAAP,GAAcD;AAJT,GAAhB;AAMH,EAhBa;AAiBd,kBAjBc,YAiBKE,EAjBL,EAiBS;AACtB;AACAb,QAAMa,EAAN,EAAUT,MAAV;;AACA,MAAGU,MAAMC,YAAN,CAAmBnB,OAAOS,MAAP,EAAnB,EAAoC,OAApC,EAA6CS,MAAME,YAAnD,CAAH,EAAqE;AACpErB,YAASsB,MAAT,CAAgBJ,EAAhB;AACA;AACD;AAvBa,CAAf","file":"/imports/api/messages.js.map","sourcesContent":["// This file contains code handling the messages collection\n\nimport { Meteor } from 'meteor/meteor';\n\nimport { Mongo } from 'meteor/mongo';\n\nimport { check } from 'meteor/check';\n\nexport const Messages = new Mongo.Collection('messages');\n\n\nMeteor.methods({\n\t'messages.insert'(text) {\n\t\t// This method is used to insert new messages into the collection\n\t\tcheck(text, String);\n\n\t\t// Make sure the user is logged in before inserting a message\n\t    if (! Meteor.userId()) {\n\t      throw new Meteor.Error('not-authorized');\n\t    }\n\n\t    Messages.insert({\n\t    \ttext,\n\t    \tcreatedAt: new Date(),\n\t    \towner: Meteor.userId(),\n\t    \tusername: Meteor.user().username,\n\t    });\n\t},\n\t'messages.remove' (id) {\n\t\t// This method removes a message that the admin wishes to delete\n\t\tcheck(id, String);\n\t\tif(Roles.userIsInRole(Meteor.userId(), 'admin', Roles.GLOBAL_GROUP)) {\n\t\t\tMessages.remove(id);\n\t\t}\n\t}\n});"]},"hash":"e7e9c56948d28e2ebe6701ac56cdebf3551da533"}
